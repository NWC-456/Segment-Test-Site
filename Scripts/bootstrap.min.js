<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <title></title>
  <meta name="Generator" content="Cocoa HTML Writer">
  <meta name="CocoaVersion" content="1894.6">
  <style type="text/css">
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
  </style>
</head>
<body>
<p class="p1">/*!</p>
<p class="p1"><span class="Apple-converted-space"> </span>* Bootstrap v4.0.0-alpha.6 (https://getbootstrap.com)</p>
<p class="p1"><span class="Apple-converted-space"> </span>* Copyright 2011-2017 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)</p>
<p class="p1"><span class="Apple-converted-space"> </span>* Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)</p>
<p class="p1"><span class="Apple-converted-space"> </span>*/</p>
<p class="p1">if ("undefined" == typeof jQuery)</p>
<p class="p1"><span class="Apple-converted-space">    </span>throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");</p>
<p class="p1">+function(t) {</p>
<p class="p1"><span class="Apple-converted-space">    </span>var e = t.fn.jquery.split(" ")[0].split(".");</p>
<p class="p1"><span class="Apple-converted-space">    </span>if (e[0] &lt; 2 &amp;&amp; e[1] &lt; 9 || 1 == e[0] &amp;&amp; 9 == e[1] &amp;&amp; e[2] &lt; 1 || e[0] &gt;= 4)</p>
<p class="p1"><span class="Apple-converted-space">        </span>throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")</p>
<p class="p1">}(jQuery),</p>
<p class="p1">+function() {</p>
<p class="p1"><span class="Apple-converted-space">    </span>function t(t, e) {</p>
<p class="p1"><span class="Apple-converted-space">        </span>if (!t)</p>
<p class="p1"><span class="Apple-converted-space">            </span>throw new ReferenceError("this hasn't been initialised - super() hasn't been called");</p>
<p class="p1"><span class="Apple-converted-space">        </span>return !e || "object" != typeof e &amp;&amp; "function" != typeof e ? t : e</p>
<p class="p1"><span class="Apple-converted-space">    </span>}</p>
<p class="p1"><span class="Apple-converted-space">    </span>function e(t, e) {</p>
<p class="p1"><span class="Apple-converted-space">        </span>if ("function" != typeof e &amp;&amp; null !== e)</p>
<p class="p1"><span class="Apple-converted-space">            </span>throw new TypeError("Super expression must either be null or a function, not " + typeof e);</p>
<p class="p1"><span class="Apple-converted-space">        </span>t.prototype = Object.create(e &amp;&amp; e.prototype, {</p>
<p class="p1"><span class="Apple-converted-space">            </span>constructor: {</p>
<p class="p1"><span class="Apple-converted-space">                </span>value: t,</p>
<p class="p1"><span class="Apple-converted-space">                </span>enumerable: !1,</p>
<p class="p1"><span class="Apple-converted-space">                </span>writable: !0,</p>
<p class="p1"><span class="Apple-converted-space">                </span>configurable: !0</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>}),</p>
<p class="p1"><span class="Apple-converted-space">        </span>e &amp;&amp; (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e)</p>
<p class="p1"><span class="Apple-converted-space">    </span>}</p>
<p class="p1"><span class="Apple-converted-space">    </span>function n(t, e) {</p>
<p class="p1"><span class="Apple-converted-space">        </span>if (!(t instanceof e))</p>
<p class="p1"><span class="Apple-converted-space">            </span>throw new TypeError("Cannot call a class as a function")</p>
<p class="p1"><span class="Apple-converted-space">    </span>}</p>
<p class="p1"><span class="Apple-converted-space">    </span>var i = "function" == typeof Symbol &amp;&amp; "symbol" == typeof Symbol.iterator ? function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>return typeof t</p>
<p class="p1"><span class="Apple-converted-space">        </span>} : function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>return t &amp;&amp; "function" == typeof Symbol &amp;&amp; t.constructor === Symbol &amp;&amp; t !== Symbol.prototype ? "symbol" : typeof t</p>
<p class="p1"><span class="Apple-converted-space">        </span>},</p>
<p class="p1"><span class="Apple-converted-space">        </span>o = function() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>function t(t, e) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>for (var n = 0; n &lt; e.length; n++) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>var i = e[n];</p>
<p class="p1"><span class="Apple-converted-space">                    </span>i.enumerable = i.enumerable || !1,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>i.configurable = !0,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>"value" in i &amp;&amp; (i.writable = !0),</p>
<p class="p1"><span class="Apple-converted-space">                    </span>Object.defineProperty(t, i.key, i)</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>return function(e, n, i) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return n &amp;&amp; t(e.prototype, n), i &amp;&amp; t(e, i), e</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">        </span>}(),</p>
<p class="p1"><span class="Apple-converted-space">        </span>r = function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>function e(t) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return {}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>function n(t) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return (t[0] || t).nodeType</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>function i() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>bindType: a.end,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>delegateType: a.end,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>handle: function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (t(e.target).is(this))</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return e.handleObj.handler.apply(this, arguments)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>function o() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (window.QUnit)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return !1;</p>
<p class="p1"><span class="Apple-converted-space">                </span>var t = document.createElement("bootstrap");</p>
<p class="p1"><span class="Apple-converted-space">                </span>for (var e in h)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>if (void 0 !== t.style[e])</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>end: h[e]</p>
<p class="p1"><span class="Apple-converted-space">                        </span>};</p>
<p class="p1"><span class="Apple-converted-space">                </span>return !1</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>function r(e) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>var n = this,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>i = !1;</p>
<p class="p1"><span class="Apple-converted-space">                </span>return t(this).one(c.TRANSITION_END, function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>i = !0</p>
<p class="p1"><span class="Apple-converted-space">                </span>}), setTimeout(function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>i || c.triggerTransitionEnd(n)</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, e), this</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>function s() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>a = o(),</p>
<p class="p1"><span class="Apple-converted-space">                </span>t.fn.emulateTransitionEnd = r,</p>
<p class="p1"><span class="Apple-converted-space">                </span>c.supportsTransitionEnd() &amp;&amp; (t.event.special[c.TRANSITION_END] = i())</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>var a = !1,</p>
<p class="p1"><span class="Apple-converted-space">                </span>l = 1e6,</p>
<p class="p1"><span class="Apple-converted-space">                </span>h = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>WebkitTransition: "webkitTransitionEnd",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>MozTransition: "transitionend",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>OTransition: "oTransitionEnd otransitionend",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>transition: "transitionend"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>c = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>TRANSITION_END: "bsTransitionEnd",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>getUID: function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>do t += ~~(Math.random() * l);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>while (document.getElementById(t));</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return t</p>
<p class="p1"><span class="Apple-converted-space">                    </span>},</p>
<p class="p1"><span class="Apple-converted-space">                    </span>getSelectorFromElement: function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = t.getAttribute("data-target");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return e || (e = t.getAttribute("href") || "", e = /^#[a-z]/i.test(e) ? e : null), e</p>
<p class="p1"><span class="Apple-converted-space">                    </span>},</p>
<p class="p1"><span class="Apple-converted-space">                    </span>reflow: function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return t.offsetHeight</p>
<p class="p1"><span class="Apple-converted-space">                    </span>},</p>
<p class="p1"><span class="Apple-converted-space">                    </span>triggerTransitionEnd: function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(e).trigger(a.end)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>},</p>
<p class="p1"><span class="Apple-converted-space">                    </span>supportsTransitionEnd: function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return Boolean(a)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>},</p>
<p class="p1"><span class="Apple-converted-space">                    </span>typeCheckConfig: function(t, i, o) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>for (var r in o)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (o.hasOwnProperty(r)) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>var s = o[r],</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>a = i[r],</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>l = a &amp;&amp; n(a) ? "element" : e(a);</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if (!new RegExp(s).test(l))</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>throw new Error(t.toUpperCase() + ": " + ('Option "' + r + '" provided type "' + l + '" ') + ('but expected type "' + s + '".'))</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>};</p>
<p class="p1"><span class="Apple-converted-space">            </span>return s(), c</p>
<p class="p1"><span class="Apple-converted-space">        </span>}(jQuery),</p>
<p class="p1"><span class="Apple-converted-space">        </span>s = (function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>var e = "alert",</p>
<p class="p1"><span class="Apple-converted-space">                </span>i = "4.0.0-alpha.6",</p>
<p class="p1"><span class="Apple-converted-space">                </span>s = "bs.alert",</p>
<p class="p1"><span class="Apple-converted-space">                </span>a = "." + s,</p>
<p class="p1"><span class="Apple-converted-space">                </span>l = ".data-api",</p>
<p class="p1"><span class="Apple-converted-space">                </span>h = t.fn[e],</p>
<p class="p1"><span class="Apple-converted-space">                </span>c = 150,</p>
<p class="p1"><span class="Apple-converted-space">                </span>u = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DISMISS: '[data-dismiss="alert"]'</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>d = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLOSE: "close" + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLOSED: "closed" + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLICK_DATA_API: "click" + a + l</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>f = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ALERT: "alert",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FADE: "fade",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>_ = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>function e(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n(this, e),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = t</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return e.prototype.close = function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t = t || this._element;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this._getRootElement(t),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n = this._triggerCloseEvent(e);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n.isDefaultPrevented() || this._removeElement(e)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e.prototype.dispose = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t.removeData(this._element, s),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = null</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e.prototype._getRootElement = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = r.getSelectorFromElement(e),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i = !1;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return n &amp;&amp; (i = t(n)[0]), i || (i = t(e).closest("." + f.ALERT)[0]), i</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e.prototype._triggerCloseEvent = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = t.Event(d.CLOSE);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return t(e).trigger(n), n</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e.prototype._removeElement = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return t(e).removeClass(f.SHOW), r.supportsTransitionEnd() &amp;&amp; t(e).hasClass(f.FADE) ? void t(e).one(r.TRANSITION_END, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return n._destroyElement(e, t)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}).emulateTransitionEnd(c) : void this._destroyElement(e)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e.prototype._destroyElement = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(e).detach().trigger(d.CLOSED).remove()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e._jQueryInterface = function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this.each(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = t(this),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o = i.data(s);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>o || (o = new e(this), i.data(s, o)),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>"close" === n &amp;&amp; o[n](this)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e._handleDismiss = function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e &amp;&amp; e.preventDefault(),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t.close(this)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, o(e, null, [{</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "VERSION",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return i</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}]), e</p>
<p class="p1"><span class="Apple-converted-space">                </span>}();</p>
<p class="p1"><span class="Apple-converted-space">            </span>return t(document).on(d.CLICK_DATA_API, u.DISMISS, _._handleDismiss(new _)), t.fn[e] = _._jQueryInterface, t.fn[e].Constructor = _, t.fn[e].noConflict = function() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return t.fn[e] = h, _._jQueryInterface</p>
<p class="p1"><span class="Apple-converted-space">            </span>}, _</p>
<p class="p1"><span class="Apple-converted-space">        </span>}(jQuery), function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>var e = "button",</p>
<p class="p1"><span class="Apple-converted-space">                </span>i = "4.0.0-alpha.6",</p>
<p class="p1"><span class="Apple-converted-space">                </span>r = "bs.button",</p>
<p class="p1"><span class="Apple-converted-space">                </span>s = "." + r,</p>
<p class="p1"><span class="Apple-converted-space">                </span>a = ".data-api",</p>
<p class="p1"><span class="Apple-converted-space">                </span>l = t.fn[e],</p>
<p class="p1"><span class="Apple-converted-space">                </span>h = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVE: "active",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>BUTTON: "btn",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FOCUS: "focus"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>c = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DATA_TOGGLE_CARROT: '[data-toggle^="button"]',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DATA_TOGGLE: '[data-toggle="buttons"]',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>INPUT: "input",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVE: ".active",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>BUTTON: ".btn"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>u = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLICK_DATA_API: "click" + s + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FOCUS_BLUR_DATA_API: "focus" + s + a + " " + ("blur" + s + a)</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>d = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>function e(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n(this, e),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = t</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return e.prototype.toggle = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = !0,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n = t(this._element).closest(c.DATA_TOGGLE)[0];</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (n) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = t(this._element).find(c.INPUT)[0];</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (i) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if ("radio" === i.type)</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>if (i.checked &amp;&amp; t(this._element).hasClass(h.ACTIVE))</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>e = !1;</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>else {</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>var o = t(n).find(c.ACTIVE)[0];</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>o &amp;&amp; t(o).removeClass(h.ACTIVE)</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                                </span>e &amp;&amp; (i.checked = !t(this._element).hasClass(h.ACTIVE), t(i).trigger("change")),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>i.focus()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element.setAttribute("aria-pressed", !t(this._element).hasClass(h.ACTIVE)),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>e &amp;&amp; t(this._element).toggleClass(h.ACTIVE)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e.prototype.dispose = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t.removeData(this._element, r),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = null</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e._jQueryInterface = function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this.each(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = t(this).data(r);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i || (i = new e(this), t(this).data(r, i)),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>"toggle" === n &amp;&amp; i[n]()</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, o(e, null, [{</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "VERSION",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return i</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}]), e</p>
<p class="p1"><span class="Apple-converted-space">                </span>}();</p>
<p class="p1"><span class="Apple-converted-space">            </span>return t(document).on(u.CLICK_DATA_API, c.DATA_TOGGLE_CARROT, function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>e.preventDefault();</p>
<p class="p1"><span class="Apple-converted-space">                </span>var n = e.target;</p>
<p class="p1"><span class="Apple-converted-space">                </span>t(n).hasClass(h.BUTTON) || (n = t(n).closest(c.BUTTON)),</p>
<p class="p1"><span class="Apple-converted-space">                </span>d._jQueryInterface.call(t(n), "toggle")</p>
<p class="p1"><span class="Apple-converted-space">            </span>}).on(u.FOCUS_BLUR_DATA_API, c.DATA_TOGGLE_CARROT, function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>var n = t(e.target).closest(c.BUTTON)[0];</p>
<p class="p1"><span class="Apple-converted-space">                </span>t(n).toggleClass(h.FOCUS, /^focus(in)?$/.test(e.type))</p>
<p class="p1"><span class="Apple-converted-space">            </span>}), t.fn[e] = d._jQueryInterface, t.fn[e].Constructor = d, t.fn[e].noConflict = function() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return t.fn[e] = l, d._jQueryInterface</p>
<p class="p1"><span class="Apple-converted-space">            </span>}, d</p>
<p class="p1"><span class="Apple-converted-space">        </span>}(jQuery), function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>var e = "carousel",</p>
<p class="p1"><span class="Apple-converted-space">                </span>s = "4.0.0-alpha.6",</p>
<p class="p1"><span class="Apple-converted-space">                </span>a = "bs.carousel",</p>
<p class="p1"><span class="Apple-converted-space">                </span>l = "." + a,</p>
<p class="p1"><span class="Apple-converted-space">                </span>h = ".data-api",</p>
<p class="p1"><span class="Apple-converted-space">                </span>c = t.fn[e],</p>
<p class="p1"><span class="Apple-converted-space">                </span>u = 600,</p>
<p class="p1"><span class="Apple-converted-space">                </span>d = 37,</p>
<p class="p1"><span class="Apple-converted-space">                </span>f = 39,</p>
<p class="p1"><span class="Apple-converted-space">                </span>_ = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>interval: 5e3,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>keyboard: !0,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>slide: !1,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>pause: "hover",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>wrap: !0</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>g = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>interval: "(number|boolean)",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>keyboard: "boolean",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>slide: "(boolean|string)",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>pause: "(string|boolean)",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>wrap: "boolean"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>p = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>NEXT: "next",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>PREV: "prev",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>LEFT: "left",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>RIGHT: "right"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>m = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SLIDE: "slide" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SLID: "slid" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>KEYDOWN: "keydown" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>MOUSEENTER: "mouseenter" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>MOUSELEAVE: "mouseleave" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>LOAD_DATA_API: "load" + l + h,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLICK_DATA_API: "click" + l + h</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>E = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CAROUSEL: "carousel",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVE: "active",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SLIDE: "slide",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>RIGHT: "carousel-item-right",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>LEFT: "carousel-item-left",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>NEXT: "carousel-item-next",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>PREV: "carousel-item-prev",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ITEM: "carousel-item"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>v = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVE: ".active",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVE_ITEM: ".active.carousel-item",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ITEM: ".carousel-item",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>NEXT_PREV: ".carousel-item-next, .carousel-item-prev",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>INDICATORS: ".carousel-indicators",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DATA_SLIDE: "[data-slide], [data-slide-to]",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DATA_RIDE: '[data-ride="carousel"]'</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>T = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>function h(e, i) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n(this, h),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._items = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._interval = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._activeElement = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isPaused = !1,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isSliding = !1,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config = this._getConfig(i),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = t(e)[0],</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._indicatorsElement = t(this._element).find(v.INDICATORS)[0],</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._addEventListeners()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return h.prototype.next = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this._isSliding)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>throw new Error("Carousel is sliding");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._slide(p.NEXT)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.nextWhenVisible = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>document.hidden || this.next()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.prev = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this._isSliding)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>throw new Error("Carousel is sliding");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._slide(p.PREVIOUS)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.pause = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>e || (this._isPaused = !0),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._element).find(v.NEXT_PREV)[0] &amp;&amp; r.supportsTransitionEnd() &amp;&amp; (r.triggerTransitionEnd(this._element), this.cycle(!0)),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>clearInterval(this._interval),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._interval = null</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.cycle = function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t || (this._isPaused = !1),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._interval &amp;&amp; (clearInterval(this._interval), this._interval = null),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config.interval &amp;&amp; !this._isPaused &amp;&amp; (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval))</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.to = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._activeElement = t(this._element).find(v.ACTIVE_ITEM)[0];</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var i = this._getItemIndex(this._activeElement);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (!(e &gt; this._items.length - 1 || e &lt; 0)) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (this._isSliding)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return void t(this._element).one(m.SLID, function() {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>return n.to(e)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>});</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (i === e)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return this.pause(), void this.cycle();</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var o = e &gt; i ? p.NEXT : p.PREVIOUS;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>this._slide(o, this._items[e])</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.dispose = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._element).off(l),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t.removeData(this._element, a),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._items = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._interval = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isPaused = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isSliding = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._activeElement = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._indicatorsElement = null</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getConfig = function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return n = t.extend({}, _, n), r.typeCheckConfig(e, n, g), n</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._addEventListeners = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config.keyboard &amp;&amp; t(this._element).on(m.KEYDOWN, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return e._keydown(t)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>"hover" !== this._config.pause || "ontouchstart" in document.documentElement || t(this._element).on(m.MOUSEENTER, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return e.pause(t)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}).on(m.MOUSELEAVE, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return e.cycle(t)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._keydown = function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (!/input|textarea/i.test(t.target.tagName))</p>
<p class="p1"><span class="Apple-converted-space">                            </span>switch (t.which) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>case d:</p>
<p class="p1"><span class="Apple-converted-space">                                </span>t.preventDefault(),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>this.prev();</p>
<p class="p1"><span class="Apple-converted-space">                                </span>break;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>case f:</p>
<p class="p1"><span class="Apple-converted-space">                                </span>t.preventDefault(),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>this.next();</p>
<p class="p1"><span class="Apple-converted-space">                                </span>break;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>default:</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getItemIndex = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this._items = t.makeArray(t(e).parent().find(v.ITEM)), this._items.indexOf(e)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getItemByDirection = function(t, e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = t === p.NEXT,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i = t === p.PREVIOUS,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>o = this._getItemIndex(e),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>r = this._items.length - 1,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>s = i &amp;&amp; 0 === o || n &amp;&amp; o === r;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (s &amp;&amp; !this._config.wrap)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return e;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var a = t === p.PREVIOUS ? -1 : 1,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>l = (o + a) % this._items.length;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return l === -1 ? this._items[this._items.length - 1] : this._items[l]</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._triggerSlideEvent = function(e, n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var i = t.Event(m.SLIDE, {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>relatedTarget: e,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>direction: n</p>
<p class="p1"><span class="Apple-converted-space">                        </span>});</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return t(this._element).trigger(i), i</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._setActiveIndicatorElement = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this._indicatorsElement) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(this._indicatorsElement).find(v.ACTIVE).removeClass(E.ACTIVE);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var n = this._indicatorsElement.children[this._getItemIndex(e)];</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n &amp;&amp; t(n).addClass(E.ACTIVE)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._slide = function(e, n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var i = this,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>o = t(this._element).find(v.ACTIVE_ITEM)[0],</p>
<p class="p1"><span class="Apple-converted-space">                            </span>s = n || o &amp;&amp; this._getItemByDirection(e, o),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>a = Boolean(this._interval),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>l = void 0,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>h = void 0,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>c = void 0;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (e === p.NEXT ? (l = E.LEFT, h = E.NEXT, c = p.LEFT) : (l = E.RIGHT, h = E.PREV, c = p.RIGHT), s &amp;&amp; t(s).hasClass(E.ACTIVE))</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return void (this._isSliding = !1);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var d = this._triggerSlideEvent(s, c);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (!d.isDefaultPrevented() &amp;&amp; o &amp;&amp; s) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>this._isSliding = !0,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>a &amp;&amp; this.pause(),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>this._setActiveIndicatorElement(s);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var f = t.Event(m.SLID, {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>relatedTarget: s,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>direction: c</p>
<p class="p1"><span class="Apple-converted-space">                            </span>});</p>
<p class="p1"><span class="Apple-converted-space">                            </span>r.supportsTransitionEnd() &amp;&amp; t(this._element).hasClass(E.SLIDE) ? (t(s).addClass(h), r.reflow(s), t(o).addClass(l), t(s).addClass(l), t(o).one(r.TRANSITION_END, function() {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>t(s).removeClass(l + " " + h).addClass(E.ACTIVE),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>t(o).removeClass(E.ACTIVE + " " + h + " " + l),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>i._isSliding = !1,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>setTimeout(function() {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>return t(i._element).trigger(f)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>}, 0)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}).emulateTransitionEnd(u)) : (t(o).removeClass(E.ACTIVE), t(s).addClass(E.ACTIVE), this._isSliding = !1, t(this._element).trigger(f)),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>a &amp;&amp; this.cycle()</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h._jQueryInterface = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this.each(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var n = t(this).data(a),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o = t.extend({}, _, t(this).data());</p>
<p class="p1"><span class="Apple-converted-space">                            </span>"object" === ("undefined" == typeof e ? "undefined" : i(e)) &amp;&amp; t.extend(o, e);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var r = "string" == typeof e ? e : o.slide;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (n || (n = new h(this, o), t(this).data(a, n)), "number" == typeof e)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n.to(e);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>else if ("string" == typeof r) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if (void 0 === n[r])</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>throw new Error('No method named "' + r + '"');</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n[r]()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>} else</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o.interval &amp;&amp; (n.pause(), n.cycle())</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h._dataApiClickHandler = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = r.getSelectorFromElement(this);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (n) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = t(n)[0];</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (i &amp;&amp; t(i).hasClass(E.CAROUSEL)) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>var o = t.extend({}, t(i).data(), t(this).data()),</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>s = this.getAttribute("data-slide-to");</p>
<p class="p1"><span class="Apple-converted-space">                                </span>s &amp;&amp; (o.interval = !1),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>h._jQueryInterface.call(t(i), o),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>s &amp;&amp; t(i).data(a).to(s),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>e.preventDefault()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, o(h, null, [{</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "VERSION",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return s</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "Default",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return _</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}]), h</p>
<p class="p1"><span class="Apple-converted-space">                </span>}();</p>
<p class="p1"><span class="Apple-converted-space">            </span>return t(document).on(m.CLICK_DATA_API, v.DATA_SLIDE, T._dataApiClickHandler), t(window).on(m.LOAD_DATA_API, function() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>t(v.DATA_RIDE).each(function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>var e = t(this);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>T._jQueryInterface.call(e, e.data())</p>
<p class="p1"><span class="Apple-converted-space">                </span>})</p>
<p class="p1"><span class="Apple-converted-space">            </span>}), t.fn[e] = T._jQueryInterface, t.fn[e].Constructor = T, t.fn[e].noConflict = function() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return t.fn[e] = c, T._jQueryInterface</p>
<p class="p1"><span class="Apple-converted-space">            </span>}, T</p>
<p class="p1"><span class="Apple-converted-space">        </span>}(jQuery), function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>var e = "collapse",</p>
<p class="p1"><span class="Apple-converted-space">                </span>s = "4.0.0-alpha.6",</p>
<p class="p1"><span class="Apple-converted-space">                </span>a = "bs.collapse",</p>
<p class="p1"><span class="Apple-converted-space">                </span>l = "." + a,</p>
<p class="p1"><span class="Apple-converted-space">                </span>h = ".data-api",</p>
<p class="p1"><span class="Apple-converted-space">                </span>c = t.fn[e],</p>
<p class="p1"><span class="Apple-converted-space">                </span>u = 600,</p>
<p class="p1"><span class="Apple-converted-space">                </span>d = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>toggle: !0,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>parent: ""</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>f = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>toggle: "boolean",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>parent: "string"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>_ = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOWN: "shown" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HIDE: "hide" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HIDDEN: "hidden" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLICK_DATA_API: "click" + l + h</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>g = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>COLLAPSE: "collapse",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>COLLAPSING: "collapsing",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>COLLAPSED: "collapsed"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>p = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>WIDTH: "width",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HEIGHT: "height"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>m = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVES: ".card &gt; .show, .card &gt; .collapsing",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DATA_TOGGLE: '[data-toggle="collapse"]'</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>E = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>function l(e, i) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n(this, l),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isTransitioning = !1,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = e,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config = this._getConfig(i),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._triggerArray = t.makeArray(t('[data-toggle="collapse"][href="#' + e.id + '"],' + ('[data-toggle="collapse"][data-target="#' + e.id + '"]'))),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._parent = this._config.parent ? this._getParent() : null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config.toggle &amp;&amp; this.toggle()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return l.prototype.toggle = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._element).hasClass(g.SHOW) ? this.hide() : this.show()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, l.prototype.show = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this._isTransitioning)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>throw new Error("Collapse is transitioning");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (!t(this._element).hasClass(g.SHOW)) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var n = void 0,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>i = void 0;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (this._parent &amp;&amp; (n = t.makeArray(t(this._parent).find(m.ACTIVES)), n.length || (n = null)), !(n &amp;&amp; (i = t(n).data(a), i &amp;&amp; i._isTransitioning))) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>var o = t.Event(_.SHOW);</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if (t(this._element).trigger(o), !o.isDefaultPrevented()) {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>n &amp;&amp; (l._jQueryInterface.call(t(n), "hide"), i || t(n).data(a, null));</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>var s = this._getDimension();</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>t(this._element).removeClass(g.COLLAPSE).addClass(g.COLLAPSING),</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>this._element.style[s] = 0,</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>this._element.setAttribute("aria-expanded", !0),</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>this._triggerArray.length &amp;&amp; t(this._triggerArray).removeClass(g.COLLAPSED).attr("aria-expanded", !0),</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>this.setTransitioning(!0);</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>var h = function() {</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>t(e._element).removeClass(g.COLLAPSING).addClass(g.COLLAPSE).addClass(g.SHOW),</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>e._element.style[s] = "",</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>e.setTransitioning(!1),</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>t(e._element).trigger(_.SHOWN)</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>};</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>if (!r.supportsTransitionEnd())</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>return void h();</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>var c = s[0].toUpperCase() + s.slice(1),</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>d = "scroll" + c;</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>t(this._element).one(r.TRANSITION_END, h).emulateTransitionEnd(u),</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>this._element.style[s] = this._element[d] + "px"</p>
<p class="p1"><span class="Apple-converted-space">                                </span>}</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, l.prototype.hide = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this._isTransitioning)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>throw new Error("Collapse is transitioning");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (t(this._element).hasClass(g.SHOW)) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var n = t.Event(_.HIDE);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (t(this._element).trigger(n), !n.isDefaultPrevented()) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>var i = this._getDimension(),</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>o = i === p.WIDTH ? "offsetWidth" : "offsetHeight";</p>
<p class="p1"><span class="Apple-converted-space">                                </span>this._element.style[i] = this._element[o] + "px",</p>
<p class="p1"><span class="Apple-converted-space">                                </span>r.reflow(this._element),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>t(this._element).addClass(g.COLLAPSING).removeClass(g.COLLAPSE).removeClass(g.SHOW),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>this._element.setAttribute("aria-expanded", !1),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>this._triggerArray.length &amp;&amp; t(this._triggerArray).addClass(g.COLLAPSED).attr("aria-expanded", !1),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>this.setTransitioning(!0);</p>
<p class="p1"><span class="Apple-converted-space">                                </span>var s = function() {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>e.setTransitioning(!1),</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>t(e._element).removeClass(g.COLLAPSING).addClass(g.COLLAPSE).trigger(_.HIDDEN)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>};</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return this._element.style[i] = "", r.supportsTransitionEnd() ? void t(this._element).one(r.TRANSITION_END, s).emulateTransitionEnd(u) : void s()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, l.prototype.setTransitioning = function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isTransitioning = t</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, l.prototype.dispose = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t.removeData(this._element, a),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._parent = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._triggerArray = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isTransitioning = null</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, l.prototype._getConfig = function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return n = t.extend({}, d, n), n.toggle = Boolean(n.toggle), r.typeCheckConfig(e, n, f), n</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, l.prototype._getDimension = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = t(this._element).hasClass(p.WIDTH);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return e ? p.WIDTH : p.HEIGHT</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, l.prototype._getParent = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n = t(this._config.parent)[0],</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return t(n).find(i).each(function(t, n) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e._addAriaAndCollapsedClass(l._getTargetFromElement(n), [n])</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}), n</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, l.prototype._addAriaAndCollapsedClass = function(e, n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (e) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = t(e).hasClass(g.SHOW);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e.setAttribute("aria-expanded", i),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n.length &amp;&amp; t(n).toggleClass(g.COLLAPSED, !i).attr("aria-expanded", i)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, l._getTargetFromElement = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = r.getSelectorFromElement(e);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return n ? t(n)[0] : null</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, l._jQueryInterface = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this.each(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var n = t(this),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o = n.data(a),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>r = t.extend({}, d, n.data(), "object" === ("undefined" == typeof e ? "undefined" : i(e)) &amp;&amp; e);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (!o &amp;&amp; r.toggle &amp;&amp; /show|hide/.test(e) &amp;&amp; (r.toggle = !1), o || (o = new l(this, r), n.data(a, o)), "string" == typeof e) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if (void 0 === o[e])</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>throw new Error('No method named "' + e + '"');</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o[e]()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, o(l, null, [{</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "VERSION",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return s</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "Default",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return d</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}]), l</p>
<p class="p1"><span class="Apple-converted-space">                </span>}();</p>
<p class="p1"><span class="Apple-converted-space">            </span>return t(document).on(_.CLICK_DATA_API, m.DATA_TOGGLE, function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>e.preventDefault();</p>
<p class="p1"><span class="Apple-converted-space">                </span>var n = E._getTargetFromElement(this),</p>
<p class="p1"><span class="Apple-converted-space">                    </span>i = t(n).data(a),</p>
<p class="p1"><span class="Apple-converted-space">                    </span>o = i ? "toggle" : t(this).data();</p>
<p class="p1"><span class="Apple-converted-space">                </span>E._jQueryInterface.call(t(n), o)</p>
<p class="p1"><span class="Apple-converted-space">            </span>}), t.fn[e] = E._jQueryInterface, t.fn[e].Constructor = E, t.fn[e].noConflict = function() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return t.fn[e] = c, E._jQueryInterface</p>
<p class="p1"><span class="Apple-converted-space">            </span>}, E</p>
<p class="p1"><span class="Apple-converted-space">        </span>}(jQuery), function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>var e = "dropdown",</p>
<p class="p1"><span class="Apple-converted-space">                </span>i = "4.0.0-alpha.6",</p>
<p class="p1"><span class="Apple-converted-space">                </span>s = "bs.dropdown",</p>
<p class="p1"><span class="Apple-converted-space">                </span>a = "." + s,</p>
<p class="p1"><span class="Apple-converted-space">                </span>l = ".data-api",</p>
<p class="p1"><span class="Apple-converted-space">                </span>h = t.fn[e],</p>
<p class="p1"><span class="Apple-converted-space">                </span>c = 27,</p>
<p class="p1"><span class="Apple-converted-space">                </span>u = 38,</p>
<p class="p1"><span class="Apple-converted-space">                </span>d = 40,</p>
<p class="p1"><span class="Apple-converted-space">                </span>f = 3,</p>
<p class="p1"><span class="Apple-converted-space">                </span>_ = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HIDE: "hide" + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HIDDEN: "hidden" + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show" + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOWN: "shown" + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLICK: "click" + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLICK_DATA_API: "click" + a + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FOCUSIN_DATA_API: "focusin" + a + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>KEYDOWN_DATA_API: "keydown" + a + l</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>g = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>BACKDROP: "dropdown-backdrop",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DISABLED: "disabled",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>p = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>BACKDROP: ".dropdown-backdrop",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DATA_TOGGLE: '[data-toggle="dropdown"]',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FORM_CHILD: ".dropdown form",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ROLE_MENU: '[role="menu"]',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ROLE_LISTBOX: '[role="listbox"]',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>NAVBAR_NAV: ".navbar-nav",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>VISIBLE_ITEMS: '[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a'</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>m = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>function e(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n(this, e),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = t,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._addEventListeners()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return e.prototype.toggle = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this.disabled || t(this).hasClass(g.DISABLED))</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return !1;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = e._getParentFromElement(this),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i = t(n).hasClass(g.SHOW);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (e._clearMenus(), i)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return !1;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if ("ontouchstart" in document.documentElement &amp;&amp; !t(n).closest(p.NAVBAR_NAV).length) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var o = document.createElement("div");</p>
<p class="p1"><span class="Apple-converted-space">                            </span>o.className = g.BACKDROP,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(o).insertBefore(this),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(o).on("click", e._clearMenus)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var r = {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>relatedTarget: this</p>
<p class="p1"><span class="Apple-converted-space">                            </span>},</p>
<p class="p1"><span class="Apple-converted-space">                            </span>s = t.Event(_.SHOW, r);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return t(n).trigger(s), !s.isDefaultPrevented() &amp;&amp; (this.focus(), this.setAttribute("aria-expanded", !0), t(n).toggleClass(g.SHOW), t(n).trigger(t.Event(_.SHOWN, r)), !1)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e.prototype.dispose = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t.removeData(this._element, s),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._element).off(a),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = null</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e.prototype._addEventListeners = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._element).on(_.CLICK, this.toggle)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e._jQueryInterface = function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this.each(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = t(this).data(s);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (i || (i = new e(this), t(this).data(s, i)), "string" == typeof n) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if (void 0 === i[n])</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>throw new Error('No method named "' + n + '"');</p>
<p class="p1"><span class="Apple-converted-space">                                </span>i[n].call(this)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e._clearMenus = function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (!n || n.which !== f) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = t(p.BACKDROP)[0];</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i &amp;&amp; i.parentNode.removeChild(i);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>for (var o = t.makeArray(t(p.DATA_TOGGLE)), r = 0; r &lt; o.length; r++) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>var s = e._getParentFromElement(o[r]),</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>a = {</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>relatedTarget: o[r]</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>};</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if (t(s).hasClass(g.SHOW) &amp;&amp; !(n &amp;&amp; ("click" === n.type &amp;&amp; /input|textarea/i.test(n.target.tagName) || "focusin" === n.type) &amp;&amp; t.contains(s, n.target))) {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>var l = t.Event(_.HIDE, a);</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>t(s).trigger(l),</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>l.isDefaultPrevented() || (o[r].setAttribute("aria-expanded", "false"), t(s).removeClass(g.SHOW).trigger(t.Event(_.HIDDEN, a)))</p>
<p class="p1"><span class="Apple-converted-space">                                </span>}</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e._getParentFromElement = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = void 0,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i = r.getSelectorFromElement(e);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return i &amp;&amp; (n = t(i)[0]), n || e.parentNode</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e._dataApiKeydownHandler = function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (/(38|40|27|32)/.test(n.which) &amp;&amp; !/input|textarea/i.test(n.target.tagName) &amp;&amp; (n.preventDefault(), n.stopPropagation(), !this.disabled &amp;&amp; !t(this).hasClass(g.DISABLED))) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = e._getParentFromElement(this),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o = t(i).hasClass(g.SHOW);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (!o &amp;&amp; n.which !== c || o &amp;&amp; n.which === c) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if (n.which === c) {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>var r = t(i).find(p.DATA_TOGGLE)[0];</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>t(r).trigger("focus")</p>
<p class="p1"><span class="Apple-converted-space">                                </span>}</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return void t(this).trigger("click")</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var s = t(i).find(p.VISIBLE_ITEMS).get();</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (s.length) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>var a = s.indexOf(n.target);</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n.which === u &amp;&amp; a &gt; 0 &amp;&amp; a--,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n.which === d &amp;&amp; a &lt; s.length - 1 &amp;&amp; a++,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>a &lt; 0 &amp;&amp; (a = 0),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>s[a].focus()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, o(e, null, [{</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "VERSION",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return i</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}]), e</p>
<p class="p1"><span class="Apple-converted-space">                </span>}();</p>
<p class="p1"><span class="Apple-converted-space">            </span>return t(document).on(_.KEYDOWN_DATA_API, p.DATA_TOGGLE, m._dataApiKeydownHandler).on(_.KEYDOWN_DATA_API, p.ROLE_MENU, m._dataApiKeydownHandler).on(_.KEYDOWN_DATA_API, p.ROLE_LISTBOX, m._dataApiKeydownHandler).on(_.CLICK_DATA_API + " " + _.FOCUSIN_DATA_API, m._clearMenus).on(_.CLICK_DATA_API, p.DATA_TOGGLE, m.prototype.toggle).on(_.CLICK_DATA_API, p.FORM_CHILD, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>t.stopPropagation()</p>
<p class="p1"><span class="Apple-converted-space">            </span>}), t.fn[e] = m._jQueryInterface, t.fn[e].Constructor = m, t.fn[e].noConflict = function() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return t.fn[e] = h, m._jQueryInterface</p>
<p class="p1"><span class="Apple-converted-space">            </span>}, m</p>
<p class="p1"><span class="Apple-converted-space">        </span>}(jQuery), function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>var e = "modal",</p>
<p class="p1"><span class="Apple-converted-space">                </span>s = "4.0.0-alpha.6",</p>
<p class="p1"><span class="Apple-converted-space">                </span>a = "bs.modal",</p>
<p class="p1"><span class="Apple-converted-space">                </span>l = "." + a,</p>
<p class="p1"><span class="Apple-converted-space">                </span>h = ".data-api",</p>
<p class="p1"><span class="Apple-converted-space">                </span>c = t.fn[e],</p>
<p class="p1"><span class="Apple-converted-space">                </span>u = 300,</p>
<p class="p1"><span class="Apple-converted-space">                </span>d = 150,</p>
<p class="p1"><span class="Apple-converted-space">                </span>f = 27,</p>
<p class="p1"><span class="Apple-converted-space">                </span>_ = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>backdrop: !0,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>keyboard: !0,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>focus: !0,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>show: !0</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>g = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>backdrop: "(boolean|string)",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>keyboard: "boolean",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>focus: "boolean",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>show: "boolean"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>p = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HIDE: "hide" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HIDDEN: "hidden" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOWN: "shown" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FOCUSIN: "focusin" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>RESIZE: "resize" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLICK_DISMISS: "click.dismiss" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>KEYDOWN_DISMISS: "keydown.dismiss" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>MOUSEUP_DISMISS: "mouseup.dismiss" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>MOUSEDOWN_DISMISS: "mousedown.dismiss" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLICK_DATA_API: "click" + l + h</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>m = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SCROLLBAR_MEASURER: "modal-scrollbar-measure",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>BACKDROP: "modal-backdrop",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>OPEN: "modal-open",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FADE: "fade",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>E = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DIALOG: ".modal-dialog",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DATA_TOGGLE: '[data-toggle="modal"]',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DATA_DISMISS: '[data-dismiss="modal"]',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>v = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>function h(e, i) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n(this, h),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config = this._getConfig(i),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = e,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._dialog = t(e).find(E.DIALOG)[0],</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._backdrop = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isShown = !1,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isBodyOverflowing = !1,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._ignoreBackdropClick = !1,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isTransitioning = !1,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._originalBodyPadding = 0,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._scrollbarWidth = 0</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return h.prototype.toggle = function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this._isShown ? this.hide() : this.show(t)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.show = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this._isTransitioning)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>throw new Error("Modal is transitioning");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>r.supportsTransitionEnd() &amp;&amp; t(this._element).hasClass(m.FADE) &amp;&amp; (this._isTransitioning = !0);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var i = t.Event(p.SHOW, {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>relatedTarget: e</p>
<p class="p1"><span class="Apple-converted-space">                        </span>});</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._element).trigger(i),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isShown || i.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), t(document.body).addClass(m.OPEN), this._setEscapeEvent(), this._setResizeEvent(), t(this._element).on(p.CLICK_DISMISS, E.DATA_DISMISS, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return n.hide(t)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}), t(this._dialog).on(p.MOUSEDOWN_DISMISS, function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(n._element).one(p.MOUSEUP_DISMISS, function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>t(e.target).is(n._element) &amp;&amp; (n._ignoreBackdropClick = !0)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>})</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}), this._showBackdrop(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return n._showElement(e)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}))</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.hide = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (e &amp;&amp; e.preventDefault(), this._isTransitioning)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>throw new Error("Modal is transitioning");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var i = r.supportsTransitionEnd() &amp;&amp; t(this._element).hasClass(m.FADE);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>i &amp;&amp; (this._isTransitioning = !0);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var o = t.Event(p.HIDE);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._element).trigger(o),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isShown &amp;&amp; !o.isDefaultPrevented() &amp;&amp; (this._isShown = !1, this._setEscapeEvent(), this._setResizeEvent(), t(document).off(p.FOCUSIN), t(this._element).removeClass(m.SHOW), t(this._element).off(p.CLICK_DISMISS), t(this._dialog).off(p.MOUSEDOWN_DISMISS), i ? t(this._element).one(r.TRANSITION_END, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return n._hideModal(t)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}).emulateTransitionEnd(u) : this._hideModal())</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.dispose = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t.removeData(this._element, a),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(window, document, this._element, this._backdrop).off(l),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._dialog = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._backdrop = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isShown = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isBodyOverflowing = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._ignoreBackdropClick = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._originalBodyPadding = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._scrollbarWidth = null</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getConfig = function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return n = t.extend({}, _, n), r.typeCheckConfig(e, n, g), n</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._showElement = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = this,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i = r.supportsTransitionEnd() &amp;&amp; t(this._element).hasClass(m.FADE);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element.parentNode &amp;&amp; this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element.style.display = "block",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element.removeAttribute("aria-hidden"),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element.scrollTop = 0,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>i &amp;&amp; r.reflow(this._element),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._element).addClass(m.SHOW),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config.focus &amp;&amp; this._enforceFocus();</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var o = t.Event(p.SHOWN, {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>relatedTarget: e</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>s = function() {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n._config.focus &amp;&amp; n._element.focus(),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n._isTransitioning = !1,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>t(n._element).trigger(o)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>};</p>
<p class="p1"><span class="Apple-converted-space">                        </span>i ? t(this._dialog).one(r.TRANSITION_END, s).emulateTransitionEnd(u) : s()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._enforceFocus = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(document).off(p.FOCUSIN).on(p.FOCUSIN, function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>document === n.target || e._element === n.target || t(e._element).has(n.target).length || e._element.focus()</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._setEscapeEvent = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isShown &amp;&amp; this._config.keyboard ? t(this._element).on(p.KEYDOWN_DISMISS, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t.which === f &amp;&amp; e.hide()</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}) : this._isShown || t(this._element).off(p.KEYDOWN_DISMISS)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._setResizeEvent = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isShown ? t(window).on(p.RESIZE, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return e._handleUpdate(t)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}) : t(window).off(p.RESIZE)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._hideModal = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element.style.display = "none",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element.setAttribute("aria-hidden", "true"),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isTransitioning = !1,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._showBackdrop(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(document.body).removeClass(m.OPEN),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e._resetAdjustments(),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e._resetScrollbar(),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(e._element).trigger(p.HIDDEN)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._removeBackdrop = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._backdrop &amp;&amp; (t(this._backdrop).remove(), this._backdrop = null)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._showBackdrop = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = this,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i = t(this._element).hasClass(m.FADE) ? m.FADE : "";</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this._isShown &amp;&amp; this._config.backdrop) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var o = r.supportsTransitionEnd() &amp;&amp; i;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (this._backdrop = document.createElement("div"), this._backdrop.className = m.BACKDROP, i &amp;&amp; t(this._backdrop).addClass(i), t(this._backdrop).appendTo(document.body), t(this._element).on(p.CLICK_DISMISS, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return n._ignoreBackdropClick ? void (n._ignoreBackdropClick = !1) : void (t.target === t.currentTarget &amp;&amp; ("static" === n._config.backdrop ? n._element.focus() : n.hide()))</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}), o &amp;&amp; r.reflow(this._backdrop), t(this._backdrop).addClass(m.SHOW), !e)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (!o)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return void e();</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(this._backdrop).one(r.TRANSITION_END, e).emulateTransitionEnd(d)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>} else if (!this._isShown &amp;&amp; this._backdrop) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(this._backdrop).removeClass(m.SHOW);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var s = function() {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n._removeBackdrop(),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>e &amp;&amp; e()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>};</p>
<p class="p1"><span class="Apple-converted-space">                            </span>r.supportsTransitionEnd() &amp;&amp; t(this._element).hasClass(m.FADE) ? t(this._backdrop).one(r.TRANSITION_END, s).emulateTransitionEnd(d) : s()</p>
<p class="p1"><span class="Apple-converted-space">                        </span>} else</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e &amp;&amp; e()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._handleUpdate = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._adjustDialog()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._adjustDialog = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var t = this._element.scrollHeight &gt; document.documentElement.clientHeight;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>!this._isBodyOverflowing &amp;&amp; t &amp;&amp; (this._element.style.paddingLeft = this._scrollbarWidth + "px"),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isBodyOverflowing &amp;&amp; !t &amp;&amp; (this._element.style.paddingRight = this._scrollbarWidth + "px")</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._resetAdjustments = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element.style.paddingLeft = "",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element.style.paddingRight = ""</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._checkScrollbar = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isBodyOverflowing = document.body.clientWidth &lt; window.innerWidth,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._scrollbarWidth = this._getScrollbarWidth()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._setScrollbar = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = parseInt(t(E.FIXED_CONTENT).css("padding-right") || 0, 10);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._originalBodyPadding = document.body.style.paddingRight || "",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isBodyOverflowing &amp;&amp; (document.body.style.paddingRight = e + this._scrollbarWidth + "px")</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._resetScrollbar = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>document.body.style.paddingRight = this._originalBodyPadding</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getScrollbarWidth = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var t = document.createElement("div");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t.className = m.SCROLLBAR_MEASURER,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>document.body.appendChild(t);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = t.offsetWidth - t.clientWidth;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return document.body.removeChild(t), e</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h._jQueryInterface = function(e, n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this.each(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var o = t(this).data(a),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>r = t.extend({}, h.Default, t(this).data(), "object" === ("undefined" == typeof e ? "undefined" : i(e)) &amp;&amp; e);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (o || (o = new h(this, r), t(this).data(a, o)), "string" == typeof e) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if (void 0 === o[e])</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>throw new Error('No method named "' + e + '"');</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o[e](n)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>} else</p>
<p class="p1"><span class="Apple-converted-space">                                </span>r.show &amp;&amp; o.show(n)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, o(h, null, [{</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "VERSION",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return s</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "Default",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return _</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}]), h</p>
<p class="p1"><span class="Apple-converted-space">                </span>}();</p>
<p class="p1"><span class="Apple-converted-space">            </span>return t(document).on(p.CLICK_DATA_API, E.DATA_TOGGLE, function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>var n = this,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>i = void 0,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>o = r.getSelectorFromElement(this);</p>
<p class="p1"><span class="Apple-converted-space">                </span>o &amp;&amp; (i = t(o)[0]);</p>
<p class="p1"><span class="Apple-converted-space">                </span>var s = t(i).data(a) ? "toggle" : t.extend({}, t(i).data(), t(this).data());</p>
<p class="p1"><span class="Apple-converted-space">                </span>"A" !== this.tagName &amp;&amp; "AREA" !== this.tagName || e.preventDefault();</p>
<p class="p1"><span class="Apple-converted-space">                </span>var l = t(i).one(p.SHOW, function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>e.isDefaultPrevented() || l.one(p.HIDDEN, function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(n).is(":visible") &amp;&amp; n.focus()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>})</p>
<p class="p1"><span class="Apple-converted-space">                </span>});</p>
<p class="p1"><span class="Apple-converted-space">                </span>v._jQueryInterface.call(t(i), s, this)</p>
<p class="p1"><span class="Apple-converted-space">            </span>}), t.fn[e] = v._jQueryInterface, t.fn[e].Constructor = v, t.fn[e].noConflict = function() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return t.fn[e] = c, v._jQueryInterface</p>
<p class="p1"><span class="Apple-converted-space">            </span>}, v</p>
<p class="p1"><span class="Apple-converted-space">        </span>}(jQuery), function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>var e = "scrollspy",</p>
<p class="p1"><span class="Apple-converted-space">                </span>s = "4.0.0-alpha.6",</p>
<p class="p1"><span class="Apple-converted-space">                </span>a = "bs.scrollspy",</p>
<p class="p1"><span class="Apple-converted-space">                </span>l = "." + a,</p>
<p class="p1"><span class="Apple-converted-space">                </span>h = ".data-api",</p>
<p class="p1"><span class="Apple-converted-space">                </span>c = t.fn[e],</p>
<p class="p1"><span class="Apple-converted-space">                </span>u = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>offset: 10,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>method: "auto",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>target: ""</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>d = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>offset: "number",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>method: "string",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>target: "(string|element)"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>f = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVATE: "activate" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SCROLL: "scroll" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>LOAD_DATA_API: "load" + l + h</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>_ = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DROPDOWN_ITEM: "dropdown-item",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DROPDOWN_MENU: "dropdown-menu",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>NAV_LINK: "nav-link",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>NAV: "nav",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVE: "active"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>g = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DATA_SPY: '[data-spy="scroll"]',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVE: ".active",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>LIST_ITEM: ".list-item",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>LI: "li",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>LI_DROPDOWN: "li.dropdown",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>NAV_LINKS: ".nav-link",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DROPDOWN: ".dropdown",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DROPDOWN_ITEMS: ".dropdown-item",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DROPDOWN_TOGGLE: ".dropdown-toggle"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>p = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>OFFSET: "offset",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>POSITION: "position"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>m = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>function h(e, i) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var o = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n(this, h),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = e,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._scrollElement = "BODY" === e.tagName ? window : e,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config = this._getConfig(i),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._selector = this._config.target + " " + g.NAV_LINKS + "," + (this._config.target + " " + g.DROPDOWN_ITEMS),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._offsets = [],</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._targets = [],</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._activeTarget = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._scrollHeight = 0,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._scrollElement).on(f.SCROLL, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return o._process(t)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.refresh(),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._process()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return h.prototype.refresh = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n = this._scrollElement !== this._scrollElement.window ? p.POSITION : p.OFFSET,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i = "auto" === this._config.method ? n : this._config.method,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>o = i === p.POSITION ? this._getScrollTop() : 0;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._offsets = [],</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._targets = [],</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._scrollHeight = this._getScrollHeight();</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var s = t.makeArray(t(this._selector));</p>
<p class="p1"><span class="Apple-converted-space">                        </span>s.map(function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var n = void 0,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>s = r.getSelectorFromElement(e);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return s &amp;&amp; (n = t(s)[0]), n &amp;&amp; (n.offsetWidth || n.offsetHeight) ? [t(n)[i]().top + o, s] : null</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}).filter(function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return t</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}).sort(function(t, e) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return t[0] - e[0]</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}).forEach(function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e._offsets.push(t[0]),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e._targets.push(t[1])</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.dispose = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t.removeData(this._element, a),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._scrollElement).off(l),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._scrollElement = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._config = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._selector = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._offsets = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._targets = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._activeTarget = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._scrollHeight = null</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getConfig = function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (n = t.extend({}, u, n), "string" != typeof n.target) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = t(n.target).attr("id");</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i || (i = r.getUID(e), t(n.target).attr("id", i)),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n.target = "#" + i</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return r.typeCheckConfig(e, n, d), n</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getScrollTop = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getScrollHeight = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getOffsetHeight = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this._scrollElement === window ? window.innerHeight : this._scrollElement.offsetHeight</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._process = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var t = this._getScrollTop() + this._config.offset,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e = this._getScrollHeight(),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n = this._config.offset + e - this._getOffsetHeight();</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this._scrollHeight !== e &amp;&amp; this.refresh(), t &gt;= n) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = this._targets[this._targets.length - 1];</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return void (this._activeTarget !== i &amp;&amp; this._activate(i))</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this._activeTarget &amp;&amp; t &lt; this._offsets[0] &amp;&amp; this._offsets[0] &gt; 0)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return this._activeTarget = null, void this._clear();</p>
<p class="p1"><span class="Apple-converted-space">                        </span>for (var o = this._offsets.length; o--;) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var r = this._activeTarget !== this._targets[o] &amp;&amp; t &gt;= this._offsets[o] &amp;&amp; (void 0 === this._offsets[o + 1] || t &lt; this._offsets[o + 1]);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>r &amp;&amp; this._activate(this._targets[o])</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._activate = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._activeTarget = e,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._clear();</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = this._selector.split(",");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n = n.map(function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return t + '[data-target="' + e + '"],' + (t + '[href="' + e + '"]')</p>
<p class="p1"><span class="Apple-converted-space">                        </span>});</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var i = t(n.join(","));</p>
<p class="p1"><span class="Apple-converted-space">                        </span>i.hasClass(_.DROPDOWN_ITEM) ? (i.closest(g.DROPDOWN).find(g.DROPDOWN_TOGGLE).addClass(_.ACTIVE), i.addClass(_.ACTIVE)) : i.parents(g.LI).find("&gt; " + g.NAV_LINKS).addClass(_.ACTIVE),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._scrollElement).trigger(f.ACTIVATE, {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>relatedTarget: e</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._clear = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this._selector).filter(g.ACTIVE).removeClass(_.ACTIVE)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h._jQueryInterface = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this.each(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var n = t(this).data(a),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o = "object" === ("undefined" == typeof e ? "undefined" : i(e)) &amp;&amp; e;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (n || (n = new h(this, o), t(this).data(a, n)), "string" == typeof e) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if (void 0 === n[e])</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>throw new Error('No method named "' + e + '"');</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n[e]()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, o(h, null, [{</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "VERSION",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return s</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "Default",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return u</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}]), h</p>
<p class="p1"><span class="Apple-converted-space">                </span>}();</p>
<p class="p1"><span class="Apple-converted-space">            </span>return t(window).on(f.LOAD_DATA_API, function() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>for (var e = t.makeArray(t(g.DATA_SPY)), n = e.length; n--;) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>var i = t(e[n]);</p>
<p class="p1"><span class="Apple-converted-space">                    </span>m._jQueryInterface.call(i, i.data())</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">            </span>}), t.fn[e] = m._jQueryInterface, t.fn[e].Constructor = m, t.fn[e].noConflict = function() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return t.fn[e] = c, m._jQueryInterface</p>
<p class="p1"><span class="Apple-converted-space">            </span>}, m</p>
<p class="p1"><span class="Apple-converted-space">        </span>}(jQuery), function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>var e = "tab",</p>
<p class="p1"><span class="Apple-converted-space">                </span>i = "4.0.0-alpha.6",</p>
<p class="p1"><span class="Apple-converted-space">                </span>s = "bs.tab",</p>
<p class="p1"><span class="Apple-converted-space">                </span>a = "." + s,</p>
<p class="p1"><span class="Apple-converted-space">                </span>l = ".data-api",</p>
<p class="p1"><span class="Apple-converted-space">                </span>h = t.fn[e],</p>
<p class="p1"><span class="Apple-converted-space">                </span>c = 150,</p>
<p class="p1"><span class="Apple-converted-space">                </span>u = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HIDE: "hide" + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HIDDEN: "hidden" + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show" + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOWN: "shown" + a,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLICK_DATA_API: "click" + a + l</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>d = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DROPDOWN_MENU: "dropdown-menu",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVE: "active",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DISABLED: "disabled",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FADE: "fade",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>f = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>A: "a",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>LI: "li",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DROPDOWN: ".dropdown",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>LIST: "ul:not(.dropdown-menu), ol:not(.dropdown-menu), nav:not(.dropdown-menu)",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FADE_CHILD: "&gt; .nav-item .fade, &gt; .fade",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVE: ".active",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>ACTIVE_CHILD: "&gt; .nav-item &gt; .active, &gt; .active",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"]',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DROPDOWN_TOGGLE: ".dropdown-toggle",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>DROPDOWN_ACTIVE_CHILD: "&gt; .dropdown-menu .active"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>_ = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>function e(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n(this, e),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = t</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return e.prototype.show = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (!(this._element.parentNode &amp;&amp; this._element.parentNode.nodeType === Node.ELEMENT_NODE &amp;&amp; t(this._element).hasClass(d.ACTIVE) || t(this._element).hasClass(d.DISABLED))) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var n = void 0,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>i = void 0,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o = t(this._element).closest(f.LIST)[0],</p>
<p class="p1"><span class="Apple-converted-space">                                </span>s = r.getSelectorFromElement(this._element);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>o &amp;&amp; (i = t.makeArray(t(o).find(f.ACTIVE)), i = i[i.length - 1]);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var a = t.Event(u.HIDE, {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>relatedTarget: this._element</p>
<p class="p1"><span class="Apple-converted-space">                                </span>}),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>l = t.Event(u.SHOW, {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>relatedTarget: i</p>
<p class="p1"><span class="Apple-converted-space">                                </span>});</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (i &amp;&amp; t(i).trigger(a), t(this._element).trigger(l), !l.isDefaultPrevented() &amp;&amp; !a.isDefaultPrevented()) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>s &amp;&amp; (n = t(s)[0]),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>this._activate(this._element, o);</p>
<p class="p1"><span class="Apple-converted-space">                                </span>var h = function() {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>var n = t.Event(u.HIDDEN, {</p>
<p class="p1"><span class="Apple-converted-space">                                            </span>relatedTarget: e._element</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>}),</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>o = t.Event(u.SHOWN, {</p>
<p class="p1"><span class="Apple-converted-space">                                            </span>relatedTarget: i</p>
<p class="p1"><span class="Apple-converted-space">                                        </span>});</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>t(i).trigger(n),</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>t(e._element).trigger(o)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>};</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n ? this._activate(n, n.parentNode, h) : h()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e.prototype.dispose = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t.removeClass(this._element, s),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._element = null</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e.prototype._activate = function(e, n, i) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var o = this,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>s = t(n).find(f.ACTIVE_CHILD)[0],</p>
<p class="p1"><span class="Apple-converted-space">                            </span>a = i &amp;&amp; r.supportsTransitionEnd() &amp;&amp; (s &amp;&amp; t(s).hasClass(d.FADE) || Boolean(t(n).find(f.FADE_CHILD)[0])),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>l = function() {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return o._transitionComplete(e, s, a, i)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>};</p>
<p class="p1"><span class="Apple-converted-space">                        </span>s &amp;&amp; a ? t(s).one(r.TRANSITION_END, l).emulateTransitionEnd(c) : l(),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>s &amp;&amp; t(s).removeClass(d.SHOW)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e.prototype._transitionComplete = function(e, n, i, o) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (n) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(n).removeClass(d.ACTIVE);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var s = t(n.parentNode).find(f.DROPDOWN_ACTIVE_CHILD)[0];</p>
<p class="p1"><span class="Apple-converted-space">                            </span>s &amp;&amp; t(s).removeClass(d.ACTIVE),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n.setAttribute("aria-expanded", !1)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (t(e).addClass(d.ACTIVE), e.setAttribute("aria-expanded", !0), i ? (r.reflow(e), t(e).addClass(d.SHOW)) : t(e).removeClass(d.FADE), e.parentNode &amp;&amp; t(e.parentNode).hasClass(d.DROPDOWN_MENU)) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var a = t(e).closest(f.DROPDOWN)[0];</p>
<p class="p1"><span class="Apple-converted-space">                            </span>a &amp;&amp; t(a).find(f.DROPDOWN_TOGGLE).addClass(d.ACTIVE),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e.setAttribute("aria-expanded", !0)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>o &amp;&amp; o()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, e._jQueryInterface = function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this.each(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = t(this),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o = i.data(s);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (o || (o = new e(this), i.data(s, o)), "string" == typeof n) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if (void 0 === o[n])</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>throw new Error('No method named "' + n + '"');</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o[n]()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, o(e, null, [{</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "VERSION",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return i</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}]), e</p>
<p class="p1"><span class="Apple-converted-space">                </span>}();</p>
<p class="p1"><span class="Apple-converted-space">            </span>return t(document).on(u.CLICK_DATA_API, f.DATA_TOGGLE, function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>e.preventDefault(),</p>
<p class="p1"><span class="Apple-converted-space">                </span>_._jQueryInterface.call(t(this), "show")</p>
<p class="p1"><span class="Apple-converted-space">            </span>}), t.fn[e] = _._jQueryInterface, t.fn[e].Constructor = _, t.fn[e].noConflict = function() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return t.fn[e] = h, _._jQueryInterface</p>
<p class="p1"><span class="Apple-converted-space">            </span>}, _</p>
<p class="p1"><span class="Apple-converted-space">        </span>}(jQuery), function(t) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>if ("undefined" == typeof Tether)</p>
<p class="p1"><span class="Apple-converted-space">                </span>throw new Error("Bootstrap tooltips require Tether (http://tether.io/)");</p>
<p class="p1"><span class="Apple-converted-space">            </span>var e = "tooltip",</p>
<p class="p1"><span class="Apple-converted-space">                </span>s = "4.0.0-alpha.6",</p>
<p class="p1"><span class="Apple-converted-space">                </span>a = "bs.tooltip",</p>
<p class="p1"><span class="Apple-converted-space">                </span>l = "." + a,</p>
<p class="p1"><span class="Apple-converted-space">                </span>h = t.fn[e],</p>
<p class="p1"><span class="Apple-converted-space">                </span>c = 150,</p>
<p class="p1"><span class="Apple-converted-space">                </span>u = "bs-tether",</p>
<p class="p1"><span class="Apple-converted-space">                </span>d = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>animation: !0,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>template: '&lt;div class="tooltip" role="tooltip"&gt;&lt;div class="tooltip-inner"&gt;&lt;/div&gt;&lt;/div&gt;',</p>
<p class="p1"><span class="Apple-converted-space">                    </span>trigger: "hover focus",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>title: "",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>delay: 0,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>html: !1,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>selector: !1,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>placement: "top",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>offset: "0 0",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>constraints: [],</p>
<p class="p1"><span class="Apple-converted-space">                    </span>container: !1</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>f = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>animation: "boolean",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>template: "string",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>title: "(string|element|function)",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>trigger: "string",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>delay: "(number|object)",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>html: "boolean",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>selector: "(string|boolean)",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>placement: "(string|function)",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>offset: "string",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>constraints: "array",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>container: "(string|element|boolean)"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>_ = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>TOP: "bottom center",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>RIGHT: "middle left",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>BOTTOM: "top center",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>LEFT: "middle right"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>g = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>OUT: "out"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>p = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HIDE: "hide" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HIDDEN: "hidden" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOWN: "shown" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>INSERTED: "inserted" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLICK: "click" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FOCUSIN: "focusin" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FOCUSOUT: "focusout" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>MOUSEENTER: "mouseenter" + l,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>MOUSELEAVE: "mouseleave" + l</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>m = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FADE: "fade",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>SHOW: "show"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>E = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>TOOLTIP: ".tooltip",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>TOOLTIP_INNER: ".tooltip-inner"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>v = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>element: !1,</p>
<p class="p1"><span class="Apple-converted-space">                    </span>enabled: !1</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>T = {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>HOVER: "hover",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>FOCUS: "focus",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>CLICK: "click",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>MANUAL: "manual"</p>
<p class="p1"><span class="Apple-converted-space">                </span>},</p>
<p class="p1"><span class="Apple-converted-space">                </span>I = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>function h(t, e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n(this, h),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isEnabled = !0,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._timeout = 0,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._hoverState = "",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._activeTrigger = {},</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isTransitioning = !1,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._tether = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.element = t,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.config = this._getConfig(e),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.tip = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._setListeners()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return h.prototype.enable = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isEnabled = !0</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.disable = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isEnabled = !1</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.toggleEnabled = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isEnabled = !this._isEnabled</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.toggle = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (e) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var n = this.constructor.DATA_KEY,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>i = t(e.currentTarget).data(n);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i || (i = new this.constructor(e.currentTarget, this._getDelegateConfig()), t(e.currentTarget).data(n, i)),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i._activeTrigger.click = !i._activeTrigger.click,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i._isWithActiveTrigger() ? i._enter(null, i) : i._leave(null, i)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>} else {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (t(this.getTipElement()).hasClass(m.SHOW))</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return void this._leave(null, this);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>this._enter(null, this)</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.dispose = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>clearTimeout(this._timeout),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.cleanupTether(),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t.removeData(this.element, this.constructor.DATA_KEY),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this.element).off(this.constructor.EVENT_KEY),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this.element).closest(".modal").off("hide.bs.modal"),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.tip &amp;&amp; t(this.tip).remove(),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._isEnabled = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._timeout = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._hoverState = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._activeTrigger = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._tether = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.element = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.config = null,</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.tip = null</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.show = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if ("none" === t(this.element).css("display"))</p>
<p class="p1"><span class="Apple-converted-space">                            </span>throw new Error("Please use show on visible elements");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = t.Event(this.constructor.Event.SHOW);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this.isWithContent() &amp;&amp; this._isEnabled) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (this._isTransitioning)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>throw new Error("Tooltip is transitioning");</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(this.element).trigger(n);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var i = t.contains(this.element.ownerDocument.documentElement, this.element);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (n.isDefaultPrevented() || !i)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var o = this.getTipElement(),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>s = r.getUID(this.constructor.NAME);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>o.setAttribute("id", s),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>this.element.setAttribute("aria-describedby", s),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>this.setContent(),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>this.config.animation &amp;&amp; t(o).addClass(m.FADE);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var a = "function" == typeof this.config.placement ? this.config.placement.call(this, o, this.element) : this.config.placement,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>l = this._getAttachment(a),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>c = this.config.container === !1 ? document.body : t(this.config.container);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(o).data(this.constructor.DATA_KEY, this).appendTo(c),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(this.element).trigger(this.constructor.Event.INSERTED),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>this._tether = new Tether({</p>
<p class="p1"><span class="Apple-converted-space">                                </span>attachment: l,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>element: o,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>target: this.element,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>classes: v,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>classPrefix: u,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>offset: this.config.offset,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>constraints: this.config.constraints,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>addTargetClasses: !1</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>r.reflow(o),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>this._tether.position(),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(o).addClass(m.SHOW);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var d = function() {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>var n = e._hoverState;</p>
<p class="p1"><span class="Apple-converted-space">                                </span>e._hoverState = null,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>e._isTransitioning = !1,</p>
<p class="p1"><span class="Apple-converted-space">                                </span>t(e.element).trigger(e.constructor.Event.SHOWN),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n === g.OUT &amp;&amp; e._leave(null, e)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>};</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (r.supportsTransitionEnd() &amp;&amp; t(this.tip).hasClass(m.FADE))</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return this._isTransitioning = !0, void t(this.tip).one(r.TRANSITION_END, d).emulateTransitionEnd(h._TRANSITION_DURATION);</p>
<p class="p1"><span class="Apple-converted-space">                            </span>d()</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.hide = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var n = this,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>i = this.getTipElement(),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>o = t.Event(this.constructor.Event.HIDE);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this._isTransitioning)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>throw new Error("Tooltip is transitioning");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var s = function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n._hoverState !== g.SHOW &amp;&amp; i.parentNode &amp;&amp; i.parentNode.removeChild(i),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n.element.removeAttribute("aria-describedby"),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(n.element).trigger(n.constructor.Event.HIDDEN),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n._isTransitioning = !1,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n.cleanupTether(),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e &amp;&amp; e()</p>
<p class="p1"><span class="Apple-converted-space">                        </span>};</p>
<p class="p1"><span class="Apple-converted-space">                        </span>t(this.element).trigger(o),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>o.isDefaultPrevented() || (t(i).removeClass(m.SHOW), this._activeTrigger[T.CLICK] = !1, this._activeTrigger[T.FOCUS] = !1, this._activeTrigger[T.HOVER] = !1, r.supportsTransitionEnd() &amp;&amp; t(this.tip).hasClass(m.FADE) ? (this._isTransitioning = !0, t(i).one(r.TRANSITION_END, s).emulateTransitionEnd(c)) : s(), this._hoverState = "")</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.isWithContent = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return Boolean(this.getTitle())</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.getTipElement = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this.tip = this.tip || t(this.config.template)[0]</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.setContent = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = t(this.getTipElement());</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.setElementContent(e.find(E.TOOLTIP_INNER), this.getTitle()),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>e.removeClass(m.FADE + " " + m.SHOW),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.cleanupTether()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.setElementContent = function(e, n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var o = this.config.html;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>"object" === ("undefined" == typeof n ? "undefined" : i(n)) &amp;&amp; (n.nodeType || n.jquery) ? o ? t(n).parent().is(e) || e.empty().append(n) : e.text(t(n).text()) : e[o ? "html" : "text"](n)</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.getTitle = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var t = this.element.getAttribute("data-original-title");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype.cleanupTether = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this._tether &amp;&amp; this._tether.destroy()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getAttachment = function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return _[t.toUpperCase()]</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._setListeners = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = this,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n = this.config.trigger.split(" ");</p>
<p class="p1"><span class="Apple-converted-space">                        </span>n.forEach(function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if ("click" === n)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>t(e.element).on(e.constructor.Event.CLICK, e.config.selector, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>return e.toggle(t)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>});</p>
<p class="p1"><span class="Apple-converted-space">                            </span>else if (n !== T.MANUAL) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>var i = n === T.HOVER ? e.constructor.Event.MOUSEENTER : e.constructor.Event.FOCUSIN,</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>o = n === T.HOVER ? e.constructor.Event.MOUSELEAVE : e.constructor.Event.FOCUSOUT;</p>
<p class="p1"><span class="Apple-converted-space">                                </span>t(e.element).on(i, e.config.selector, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>return e._enter(t)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>}).on(o, e.config.selector, function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>return e._leave(t)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>})</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                            </span>t(e.element).closest(".modal").on("hide.bs.modal", function() {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return e.hide()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>})</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}),</p>
<p class="p1"><span class="Apple-converted-space">                        </span>this.config.selector ? this.config = t.extend({}, this.config, {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>trigger: "manual",</p>
<p class="p1"><span class="Apple-converted-space">                            </span>selector: ""</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}) : this._fixTitle()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._fixTitle = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var t = i(this.element.getAttribute("data-original-title"));</p>
<p class="p1"><span class="Apple-converted-space">                        </span>(this.element.getAttribute("title") || "string" !== t) &amp;&amp; (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""))</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._enter = function(e, n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var i = this.constructor.DATA_KEY;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return n = n || t(e.currentTarget).data(i), n || (n = new this.constructor(e.currentTarget, this._getDelegateConfig()), t(e.currentTarget).data(i, n)), e &amp;&amp; (n._activeTrigger["focusin" === e.type ? T.FOCUS : T.HOVER] = !0), t(n.getTipElement()).hasClass(m.SHOW) || n._hoverState === g.SHOW ? void (n._hoverState = g.SHOW) : (clearTimeout(n._timeout), n._hoverState = g.SHOW, n.config.delay &amp;&amp; n.config.delay.show ? void (n._timeout = setTimeout(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n._hoverState === g.SHOW &amp;&amp; n.show()</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}, n.config.delay.show)) : void n.show())</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._leave = function(e, n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var i = this.constructor.DATA_KEY;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (n = n || t(e.currentTarget).data(i), n || (n = new this.constructor(e.currentTarget, this._getDelegateConfig()), t(e.currentTarget).data(i, n)), e &amp;&amp; (n._activeTrigger["focusout" === e.type ? T.FOCUS : T.HOVER] = !1), !n._isWithActiveTrigger())</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return clearTimeout(n._timeout), n._hoverState = g.OUT, n.config.delay &amp;&amp; n.config.delay.hide ? void (n._timeout = setTimeout(function() {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n._hoverState === g.OUT &amp;&amp; n.hide()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}, n.config.delay.hide)) : void n.hide()</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._isWithActiveTrigger = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>for (var t in this._activeTrigger)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (this._activeTrigger[t])</p>
<p class="p1"><span class="Apple-converted-space">                                </span>return !0;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return !1</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getConfig = function(n) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return n = t.extend({}, this.constructor.Default, t(this.element).data(), n), n.delay &amp;&amp; "number" == typeof n.delay &amp;&amp; (n.delay = {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>show: n.delay,</p>
<p class="p1"><span class="Apple-converted-space">                            </span>hide: n.delay</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}), r.typeCheckConfig(e, n, this.constructor.DefaultType), n</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h.prototype._getDelegateConfig = function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var t = {};</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if (this.config)</p>
<p class="p1"><span class="Apple-converted-space">                            </span>for (var e in this.config)</p>
<p class="p1"><span class="Apple-converted-space">                                </span>this.constructor.Default[e] !== this.config[e] &amp;&amp; (t[e] = this.config[e]);</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return t</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, h._jQueryInterface = function(e) {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return this.each(function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>var n = t(this).data(a),</p>
<p class="p1"><span class="Apple-converted-space">                                </span>o = "object" === ("undefined" == typeof e ? "undefined" : i(e)) &amp;&amp; e;</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if ((n || !/dispose|hide/.test(e)) &amp;&amp; (n || (n = new h(this, o), t(this).data(a, n)), "string" == typeof e)) {</p>
<p class="p1"><span class="Apple-converted-space">                                </span>if (void 0 === n[e])</p>
<p class="p1"><span class="Apple-converted-space">                                    </span>throw new Error('No method named "' + e + '"');</p>
<p class="p1"><span class="Apple-converted-space">                                </span>n[e]()</p>
<p class="p1"><span class="Apple-converted-space">                            </span>}</p>
<p class="p1"><span class="Apple-converted-space">                        </span>})</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, o(h, null, [{</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "VERSION",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return s</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "Default",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return d</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "NAME",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return e</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "DATA_KEY",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return a</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "Event",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return p</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "EVENT_KEY",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return l</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>key: "DefaultType",</p>
<p class="p1"><span class="Apple-converted-space">                        </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>return f</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}]), h</p>
<p class="p1"><span class="Apple-converted-space">                </span>}();</p>
<p class="p1"><span class="Apple-converted-space">            </span>return t.fn[e] = I._jQueryInterface, t.fn[e].Constructor = I, t.fn[e].noConflict = function() {</p>
<p class="p1"><span class="Apple-converted-space">                </span>return t.fn[e] = h, I._jQueryInterface</p>
<p class="p1"><span class="Apple-converted-space">            </span>}, I</p>
<p class="p1"><span class="Apple-converted-space">        </span>}(jQuery));</p>
<p class="p1"><span class="Apple-converted-space">    </span>(function(r) {</p>
<p class="p1"><span class="Apple-converted-space">        </span>var a = "popover",</p>
<p class="p1"><span class="Apple-converted-space">            </span>l = "4.0.0-alpha.6",</p>
<p class="p1"><span class="Apple-converted-space">            </span>h = "bs.popover",</p>
<p class="p1"><span class="Apple-converted-space">            </span>c = "." + h,</p>
<p class="p1"><span class="Apple-converted-space">            </span>u = r.fn[a],</p>
<p class="p1"><span class="Apple-converted-space">            </span>d = r.extend({}, s.Default, {</p>
<p class="p1"><span class="Apple-converted-space">                </span>placement: "right",</p>
<p class="p1"><span class="Apple-converted-space">                </span>trigger: "click",</p>
<p class="p1"><span class="Apple-converted-space">                </span>content: "",</p>
<p class="p1"><span class="Apple-converted-space">                </span>template: '&lt;div class="popover" role="tooltip"&gt;&lt;h3 class="popover-title"&gt;&lt;/h3&gt;&lt;div class="popover-content"&gt;&lt;/div&gt;&lt;/div&gt;'</p>
<p class="p1"><span class="Apple-converted-space">            </span>}),</p>
<p class="p1"><span class="Apple-converted-space">            </span>f = r.extend({}, s.DefaultType, {</p>
<p class="p1"><span class="Apple-converted-space">                </span>content: "(string|element|function)"</p>
<p class="p1"><span class="Apple-converted-space">            </span>}),</p>
<p class="p1"><span class="Apple-converted-space">            </span>_ = {</p>
<p class="p1"><span class="Apple-converted-space">                </span>FADE: "fade",</p>
<p class="p1"><span class="Apple-converted-space">                </span>SHOW: "show"</p>
<p class="p1"><span class="Apple-converted-space">            </span>},</p>
<p class="p1"><span class="Apple-converted-space">            </span>g = {</p>
<p class="p1"><span class="Apple-converted-space">                </span>TITLE: ".popover-title",</p>
<p class="p1"><span class="Apple-converted-space">                </span>CONTENT: ".popover-content"</p>
<p class="p1"><span class="Apple-converted-space">            </span>},</p>
<p class="p1"><span class="Apple-converted-space">            </span>p = {</p>
<p class="p1"><span class="Apple-converted-space">                </span>HIDE: "hide" + c,</p>
<p class="p1"><span class="Apple-converted-space">                </span>HIDDEN: "hidden" + c,</p>
<p class="p1"><span class="Apple-converted-space">                </span>SHOW: "show" + c,</p>
<p class="p1"><span class="Apple-converted-space">                </span>SHOWN: "shown" + c,</p>
<p class="p1"><span class="Apple-converted-space">                </span>INSERTED: "inserted" + c,</p>
<p class="p1"><span class="Apple-converted-space">                </span>CLICK: "click" + c,</p>
<p class="p1"><span class="Apple-converted-space">                </span>FOCUSIN: "focusin" + c,</p>
<p class="p1"><span class="Apple-converted-space">                </span>FOCUSOUT: "focusout" + c,</p>
<p class="p1"><span class="Apple-converted-space">                </span>MOUSEENTER: "mouseenter" + c,</p>
<p class="p1"><span class="Apple-converted-space">                </span>MOUSELEAVE: "mouseleave" + c</p>
<p class="p1"><span class="Apple-converted-space">            </span>},</p>
<p class="p1"><span class="Apple-converted-space">            </span>m = function(s) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>function u() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return n(this, u), t(this, s.apply(this, arguments))</p>
<p class="p1"><span class="Apple-converted-space">                </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>return e(u, s), u.prototype.isWithContent = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return this.getTitle() || this._getContent()</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, u.prototype.getTipElement = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return this.tip = this.tip || r(this.config.template)[0]</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, u.prototype.setContent = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>var t = r(this.getTipElement());</p>
<p class="p1"><span class="Apple-converted-space">                    </span>this.setElementContent(t.find(g.TITLE), this.getTitle()),</p>
<p class="p1"><span class="Apple-converted-space">                    </span>this.setElementContent(t.find(g.CONTENT), this._getContent()),</p>
<p class="p1"><span class="Apple-converted-space">                    </span>t.removeClass(_.FADE + " " + _.SHOW),</p>
<p class="p1"><span class="Apple-converted-space">                    </span>this.cleanupTether()</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, u.prototype._getContent = function() {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return this.element.getAttribute("data-content") || ("function" == typeof this.config.content ? this.config.content.call(this.element) : this.config.content)</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, u._jQueryInterface = function(t) {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return this.each(function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>var e = r(this).data(h),</p>
<p class="p1"><span class="Apple-converted-space">                            </span>n = "object" === ("undefined" == typeof t ? "undefined" : i(t)) ? t : null;</p>
<p class="p1"><span class="Apple-converted-space">                        </span>if ((e || !/destroy|hide/.test(t)) &amp;&amp; (e || (e = new u(this, n), r(this).data(h, e)), "string" == typeof t)) {</p>
<p class="p1"><span class="Apple-converted-space">                            </span>if (void 0 === e[t])</p>
<p class="p1"><span class="Apple-converted-space">                                </span>throw new Error('No method named "' + t + '"');</p>
<p class="p1"><span class="Apple-converted-space">                            </span>e[t]()</p>
<p class="p1"><span class="Apple-converted-space">                        </span>}</p>
<p class="p1"><span class="Apple-converted-space">                    </span>})</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, o(u, null, [{</p>
<p class="p1"><span class="Apple-converted-space">                    </span>key: "VERSION",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return l</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>key: "Default",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return d</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>key: "NAME",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return a</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>key: "DATA_KEY",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return h</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>key: "Event",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return p</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>key: "EVENT_KEY",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return c</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>}, {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>key: "DefaultType",</p>
<p class="p1"><span class="Apple-converted-space">                    </span>get: function() {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return f</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}</p>
<p class="p1"><span class="Apple-converted-space">                </span>}]), u</p>
<p class="p1"><span class="Apple-converted-space">            </span>}(s);</p>
<p class="p1"><span class="Apple-converted-space">        </span>return r.fn[a] = m._jQueryInterface, r.fn[a].Constructor = m, r.fn[a].noConflict = function() {</p>
<p class="p1"><span class="Apple-converted-space">            </span>return r.fn[a] = u, m._jQueryInterface</p>
<p class="p1"><span class="Apple-converted-space">        </span>}, m</p>
<p class="p1"><span class="Apple-converted-space">    </span>})(jQuery)</p>
<p class="p1">}();</p>
<p class="p2"><br></p>
</body>
</html>
